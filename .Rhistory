clear
library(swirl)
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(mt_vector) <- c(4,5)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(4, 5)
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients,my_matrix)
my_Data
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp","rating", "test")
?colnames
colunames(my_data)
colnames(my_data)
colnames(my_data) <- cnames
my_Data
my_data
head(flags)
dim(flags)
class(flags)
cls_list <- lappy(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(Ccls_list)
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(cls_list)
?sapply
cls_vect <- sapply(cls_list, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors,mean)
flag_shapes <- flag[,19:23]
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply (flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
bye
bye()
quit()
install.package("XML")
install.packages("XML")
install.packages("RCurl")
install.packages("RCurl")
library(XML)
theurl <- "http://en.wikipedia.org/wiki/Brazil_national_football_team"
webpage <- getURL(theurl) # Process escape characters
webpage <- readLines(tc <- textConnection(webpage))
close(tc)
webpage <- getURL(theurl) # Process escape characters
library(XML)
library(RCurl)
webpage <- getURL(theurl) # Process escape characters
webpage <- readLines(tc <- textConnection(webpage))
close(tc)
pagetree <- htmlTreeParse(webpage, error=function(...){}, useInternalNodes = TRUE)
tablehead <- xpathSApply(pagetree, "//*/table[@class='wikitable sortable']/tr/th", xmlValue)
results <- xpathSApply(pagetree, "//*/table[@class='wikitable sortable']/tr/td", xmlValue)
tablehead
results
webpage
result
resultre
results
?download.file()
?load()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head()
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
cran[5:20]
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
select(cran)
cran
select(cran, -time)
-5:20
select(cran, -(5:20))
-(5:20)
select(cran,-(5:20))
select(cran,-(5:cran.length))
select(cran,-(5:cran.len))
select(cran,-(5:cran.lenght()))
select(cran,-(5:cran.length()))
select(cran,-(5:size))
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(Cran, r_version =="3.1.1", country =="US")
filter(cran, r_version =="3.1.1", country =="US")
?Comparison
filter(cran, r_version =="3.1.1", country =="IN")
filter(cran, r_version =="3.0.2", country =="IN")
filter(cran, r_version <="3.0.2", country =="IN")
filter(cran, country =="US" | country =="IN")
filter(cran, size > 100500,  r_os =="linux_gnu")
filter(cran, size > 100500,  r_os =="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version)
)
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_Df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_rum
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
cran %>% select (ip_id, country, package, size) %>% print
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex","class"))
submit()
students3
submit()
?spread()
?spread
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
students4
submit()
submit()
?unique
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?rbind_list
rbind_list(passed, failed)
sat
?select
submit()
submit()
?separate
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("//192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms(03:22:14)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes =34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes =34, seconds = 55)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart+hours(15)+minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008","Singapore")
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interbal()
?new_interval()
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
bye()
bye()
quit()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "eb16f1a9c7b1352a0408")
myapp <- oauth_app("github", "eb16f1a9c7b1352a0408","52bc869a8c30aa92e7241b71298f97c419859446")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
content(req)
stop_for_status(req)
req
content(req)
json1 = content(req)
bye()
quit()
getwd()
setwd("/Users/thamyongxiang/MOOC")
dir()
setwd("/Users/thamyongxiang/MOOC/Reproducible Research")
setwd("/Users/thamyongxiang/MOOC/Reproducible Research/Assignment")
setwd("/Users/thamyongxiang/MOOC/Reproducible Research/Assignment1")
dir()
setwd("/Users/thamyongxiang/MOOC/Reproducible Research/Assignment1/RepData_PeerAssessment1")
dir()
library(knitr)
opts_chunk$set(echo = TRUE)
activityData <- read.csv("activity.csv")
timeFormatted <- as.POSIXct(strptime(paste(sprintf("%02d", floor(activityData$interval/100)), sprintf("%02d", (activityData$interval %% 100)), rep.int(sprintf("%02d",0), nrow(activityData)), sep=":"),format="%H:%M:%S"))
## Retrieve only time from the above formatted time
timeOnly <- strftime(timeFormatted, format="%H:%M:%S")
## Create Date Time column by combining date and time together
dateTime <- paste(as.character(activityData$date), timeOnly, sep = " ")
## Add into activity dataset
activityData <- cbind(activityData, timeOnly, dateTime)
stepsPerDay <- aggregate(steps ~ date, activityData, sum)
## Create histogram with bin size/break of 10, this will allow user to visualize and understand the distribution of the steps taken through out the days.
hist(stepsPerDay$steps, col = "blue", main = "Steps taken Per Day", xlab = "Steps Taken", ylab = "Frequency", breaks = 10)
mean <- mean(stepsPerDay$steps)
mean
median <- median(stepsPerDay$steps)
median
stepsPerInterval <- aggregate(activityData$steps, by = list(interval = activityData$interval), mean, na.rm=TRUE)
names(stepsPerInterval) <- c("interval","steps")
plot(stepsPerInterval, type = "l", xlab = "5-minute interval", ylab = "Avg. no. of steps taken across all days", main = "Average Daily Activity Pattern")
maxStepsInterval <- stepsPerInterval[which.max(stepsPerInterval$steps), 1]
maxStepsInterval
missingValues <- sum(!(complete.cases(activityData$steps)))
replaceValue <- function (dataset, meanDataset) {
index <- which(is.na(dataset$steps))
replace <- unlist(lapply(index, FUN=function(replacementIndex){
meanDataset[meanDataset$interval == dataset[replacementIndex,]$interval,]$steps
}))
imputedSteps <- dataset$steps
imputedSteps[index] <- replace
imputedSteps
}
activityDataImpute <- activityData
activityDataImpute$steps <- replaceValue(activityDataImpute, stepsPerInterval)
activityDataImpute$steps <- activityDataImpute$steps
missingValuesFill <- sum(is.na(activityDataImpute$steps))
missingValuesFill
imputeStepsPerDay <- aggregate(steps ~ date, activityDataImpute, sum)
hist(imputeStepsPerDay$steps, col = "red", main = "Steps taken Per Day with Impute Values", xlab = "Steps Taken", ylab = "Frequency", breaks = 10)
imputeMean <- mean(imputeStepsPerDay$steps)
imputeMean
imputeMedian <- median(imputeStepsPerDay$steps)
imputeMedian
View(stepsPerDay)
View(activityDataImpute)
class(activityData$date)
day <- function(date){
if(weekdays(as.Date(date)) %in% c("Sunday","Saturday")){
"Weekend"
}
else{
"Weekday"
}
}
View(stepsPerInterval)
activityDataImpute$day <- as.factor(sapply(activityDataImpute$date, date))
activityDataImpute$day <- as.factor(sapply(activityDataImpute$date, day))
imputeStepsPerDayType <- aggregate(steps ~ interval + day, activityDataImpute, mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, by = list(interval = activityDataImpute$interval, day = activityDataImpute$day), mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, by = list(interval = activityDataImpute$interval), mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, activityDataImpute, mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, by = activityDataImpute, mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, by = activityDataImpute$interval, mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, by = activityDataImpute$day, mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, by = list(interval + day = activityDataImpute$interval + activityDataImpute$day), mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, by = list(activityDataImpute$interval + activityDataImpute$day), mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, activityDataImpute, mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, activityDataImpute, mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, data = activityDataImpute, mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, data = activityDataImpute.data, mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, data = activityDataImpute, mean)
View(activityDataImpute)
View(activityDataImpute)
names(activityDataImpute) <- c("steps", "date_format", "interval", "timem_format", "date_time_format","day_type")
imputeStepsPerDayType <- aggregate(steps ~ interval + day_type, activityDataImpute, mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day_type, activityDataImpute, mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day_type, activityDataImpute, mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day_type, activityDataImpute, mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day_type, activityDataImpute, mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day_type, activityDataImpute, mean)
names(activityDataImpute) <- c("steps", "date_format", "interval", "timem_format", "date_time_format","day_type")
imputeStepsPerDayType <- aggregate(steps ~ interval + day_type, activityDataImpute, mean)
View(activityDataImpute)
View(activityDataImpute)
names(activityDataImpute) <- c("steps", "date_format", "interval", "time_format", "date_time_format","day_type")
imputeStepsPerDayType <- aggregate(steps ~ interval + day_type, activityDataImpute, mean)
names(activityDataImpute) <- c("s", "d1", "i", "t1", "dt1","d2")
imputeStepsPerDayType <- aggregate(s ~ i + d2, activityDataImpute, mean)
names(activityDataImpute) <- c("steps", "date_format", "interval", "time_format", "date_time_format","day_type")
imputeStepsPerDayType <- aggregate(steps ~ interval + day_type, activityDataImpute, mean)
day_type <- function(date){
if(weekdays(as.Date(date)) %in% c("Sunday","Saturday")){
"Weekend"
}
else{
"Weekday"
}
}
activityDataImpute$day <- as.factor(sapply(activityDataImpute$date, day_type))
activityDataImpute <- activityData
activityDataImpute$steps <- replaceValue(activityDataImpute, stepsPerInterval)
activityDataImpute$steps <- activityDataImpute$steps
day_type <- function(date){
if(weekdays(as.Date(date)) %in% c("Sunday","Saturday")){
"Weekend"
}
else{
"Weekday"
}
}
activityDataImpute$day <- as.factor(sapply(activityDataImpute$date, day_type))
names(activityDataImpute) <- c("steps", "date_format", "interval", "time_format", "date_time_format","day_type")
imputeStepsPerDayType <- aggregate(steps ~ interval + day_type, activityDataImpute, mean)
library(knitr)
opts_chunk$set(echo = TRUE)
activityData <- read.csv("activity.csv")
timeFormatted <- as.POSIXct(strptime(paste(sprintf("%02d", floor(activityData$interval/100)), sprintf("%02d", (activityData$interval %% 100)), rep.int(sprintf("%02d",0), nrow(activityData)), sep=":"),format="%H:%M:%S"))
## Retrieve only time from the above formatted time
timeOnly <- strftime(timeFormatted, format="%H:%M:%S")
## Create Date Time column by combining date and time together
dateTime <- paste(as.character(activityData$date), timeOnly, sep = " ")
## Add into activity dataset
activityData <- cbind(activityData, timeOnly, dateTime)
## Look at the data to make sure the above code perform as expected
str(activityData)
stepsPerDay <- aggregate(steps ~ date, activityData, sum)
## Create histogram with bin size/break of 10, this will allow user to visualize and understand the distribution of the steps taken through out the days.
hist(stepsPerDay$steps, col = "blue", main = "Steps taken Per Day", xlab = "Steps Taken", ylab = "Frequency", breaks = 10)
meanPerDay <- mean(stepsPerDay$steps)
meanPerDay
medianPerDay <- median(stepsPerDay$steps)
medianPerDay
stepsPerInterval <- aggregate(activityData$steps, activityData, mean, na.rm=TRUE)
plot(stepsPerInterval, type = "l", xlab = "5-minute interval", ylab = "Avg. no. of steps taken across all days", main = "Average Daily Activity Pattern")
View(stepsPerInterval)
stepsPerInterval <- aggregate(activityData$steps, by = list(interval = activityData$interval), mean, na.rm=TRUE)
names(stepsPerInterval) <- c("interval","steps")
plot(stepsPerInterval, type = "l", xlab = "5-minute interval", ylab = "Avg. no. of steps taken across all days", main = "Average Daily Activity Pattern")
maxStepsInterval <- stepsPerInterval[which.max(stepsPerInterval$steps), 1]
maxStepsInterval
missingValues <- sum(!(complete.cases(activityData$steps)))
replaceValue <- function (dataset, meanDataset) {
index <- which(is.na(dataset$steps))
replace <- unlist(lapply(index, FUN=function(replacementIndex){
meanDataset[meanDataset$interval == dataset[replacementIndex,]$interval,]$steps
}))
imputedSteps <- dataset$steps
imputedSteps[index] <- replace
imputedSteps
}
activityDataImpute <- activityData
activityDataImpute$steps <- replaceValue(activityDataImpute, stepsPerInterval)
activityDataImpute$steps <- activityDataImpute$steps
missingValuesFill <- sum(is.na(activityDataImpute$steps))
missingValuesFill
imputeStepsPerDay <- aggregate(steps ~ date, activityDataImpute, sum)
hist(imputeStepsPerDay$steps, col = "red", main = "Steps taken Per Day with Impute Values", xlab = "Steps Taken", ylab = "Frequency", breaks = 10)
imputeMeanPerDay <- mean(imputeStepsPerDay$steps)
imputeMeanPerDay
imputeMedianPerDay <- median(imputeStepsPerDay$steps)
imputeMedianPerDay
day_type <- function(date){
if(weekdays(as.Date(date)) %in% c("Sunday","Saturday")){
"Weekend"
}
else{
"Weekday"
}
}
activityDataImpute$day <- as.factor(sapply(activityDataImpute$date, day_type))
names(activityDataImpute) <- c("steps", "date_format", "interval", "time_format", "date_time_format","day_type")
imputeStepsPerDayType <- aggregate(steps ~ interval + day_type, activityDataImpute, mean)
View(imputeStepsPerDayType)
activityDataImpute <- activityData
activityDataImpute$steps <- replaceValue(activityDataImpute, stepsPerInterval)
activityDataImpute$steps <- activityDataImpute$steps
missingValuesFill <- sum(is.na(activityDataImpute$steps))
missingValuesFill
imputeStepsPerDay <- aggregate(steps ~ date, activityDataImpute, sum)
hist(imputeStepsPerDay$steps, col = "red", main = "Steps taken Per Day with Impute Values", xlab = "Steps Taken", ylab = "Frequency", breaks = 10)
imputeMeanPerDay <- mean(imputeStepsPerDay$steps)
imputeMeanPerDay
imputeMedianPerDay <- median(imputeStepsPerDay$steps)
imputeMedianPerDay
day_type <- function(date){
if(weekdays(as.Date(date)) %in% c("Sunday","Saturday")){
"Weekend"
}
else{
"Weekday"
}
}
activityDataImpute$day <- as.factor(sapply(activityDataImpute$date, day_type))
imputeStepsPerDayType <- aggregate(steps ~ interval + day, activityDataImpute, mean)
xyplot(imputeStepsPerDayType$steps ~ imputeStepsPerDayType$interval|imputeStepsPerDayType$day, main="Average Steps per Weekday & Weekend by Interval", xlab ="Interval", ylab ="Avg Steps",layout=(1,2), type ="l")
xyplot(imputeStepsPerDayType$steps ~ imputeStepsPerDayType$interval|imputeStepsPerDayType$day, main="Average Steps per Weekday & Weekend by Interval", xlab ="Interval", ylab ="Avg Steps",layout=c(1,2), type ="l")
library(lattice)
xyplot(imputeStepsPerDayType$steps ~ imputeStepsPerDayType$interval|imputeStepsPerDayType$day, main="Average Steps per Weekday & Weekend by Interval", xlab ="Interval", ylab ="Avg Steps",layout=c(1,2), type ="l")
imputeStepsPerDayType <- aggregate(steps ~ interval + day, activityDataImpute, mean)
View(imputeStepsPerDayType)
View(imputeStepsPerDayType)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, by = list(interval = activityDataImpute$interval), mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, by = list(interval = activityDataImpute$interval, day = activityDataImpute$day), mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, by = list(interval = activityDataImpute$interval), mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, by = list(interval = activityDataImpute$interval, day = activityDataImpute$day), mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, activityDataImpute, mean)
imputeStepsPerDayType <- aggregate(steps ~ interval + day, activityDataImpute, mean)
knit2html(PA1_template.Rmd)
knit2html("PA1_template.Rmd")
